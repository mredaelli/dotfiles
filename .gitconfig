[user]
    email=massimo@typish.io
	  name=Massimo Redaelli
     
[branch]
    sort = -committerdate

[color]
  	ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "status"]
    added = yellow
    changed = green
    untracked = red

[core]
    pager = delta
    excludesfile = ~/.gitignore_global
    autocrlf = input
    safecrlf = true

[credential]
    helper = libsecret

[commit]
   	verbose = true

[delta]
    navigate = true  # use n and N to move between diff sections
    plus-style="syntax #012800" 
    minus-style="normal #340001"
    features = decorations  # line numbers

[diff]
	submodule = log
  colorMoved = default
  algorithm = histogram

[interactive]
    diffFilter = delta --color-only

[log]
    date = iso

[merge]
    tool = vim_mergetool
    conflictstyle = zdiff3

[mergetool "vim_mergetool"]
    cmd = vim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
    trustExitCode = true

[pull]
	rebase = true

[push]
	  recurseSubmodules = on-demand
    autoSetupRemote = true
    followtags = true

[rebase]
  	autoStash = true
    autosquash = true

[sendemail]
	  smtpserver = smtp.fastmail.com
	  smtpuser = massimo@typish.io
	  smtpencryption = tls
	  smtpserverport = 587

[status]
	submodulesummary = true

[submodule]
	recurse = true

[url "https://github.com/"]
    insteadOf = gh:
[url "https://gist.github.com/"]
    insteadOf = gist:
[url "https://bitbucket.org/"]
    insteadOf = bb:
[url "git@github.com:"]
    insteadOf = "https://github.com/"

[includeIf "gitdir:~/src/lari/"]
	path = src/lari/lari.gitconfig

[alias]
    # https://blog.jez.io/cli-code-review/
    files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
    stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
    review = !nvim -p $(git files) +\"tabdo Gvdiffsplit $REVIEW_BASE | wincmd h | Gitsigns change_base $REVIEW_BASE\"
    reviewone = !nvim +\"Gvdiffsplit $REVIEW_BASE | wincmd h | Gitsigns change_base $REVIEW_BASE\"

    # https://github.com/GitAlias/gitalias/
    search-commits = !"f() { \
        query=\"$1\"; \
        shift; \
        git log -S\"$query\" \"$@\"; \
    }; f \"$@\""
    rw = !"reword() { \
        [[ \"$*\" =~ ^/.*/.*/$ ]] && new=$(git log -1 --format=%s | sed s\"$*\") || new=\"$*\"; \
        git commit --amend -m \"${new##*( )}\"; \
    }; reword \"$new\""

    log-list = log --graph --topo-order --date=short --abbrev-commit --decorate --all --boundary --pretty=format:'%Cgreen%ad %Cred%h%Creset -%C(yellow)%d%Creset %s %Cblue[%cn]%Creset %Cblue%G?%Creset'
    log = log-list

    current-branch = rev-parse --abbrev-ref HEAD

    clone-lean = clone --depth 1 --filter=combine:blob:none+tree:0 --no-checkout
    cloner = clone --recurse-submodules

    branch-commit-first = "!f() { \
        branch="${1:-$(git current-branch)}"; \
        count="${2:-1}"; \
        git log --reverse --pretty=%H "$branch" | \
        head -"$count"; \
    }; f"

    # when you need to rebase someone's branch on master
    rum =!"f() { git fetch; git checkout ${1:-$(git current-branch)}; git reset --hard @{u}; git rebase -i origin/master }; f"

    clean-branch = !"f() { git rebase -i $(git branch-commit-first) } f"
